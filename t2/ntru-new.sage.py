

# This file was *autogenerated* from the file ntru-new.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1000 = Integer(1000); _sage_const_3 = Integer(3); _sage_const_1500 = Integer(1500); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0)
from random import choice

N = next_prime(_sage_const_1000 )
p = _sage_const_3 
q = next_prime(_sage_const_1500 )

_Z = ZZ['w']; (w,) = _Z._first_ngens(1)
R = QuotientRing(_Z , _Z.ideal(w**N - _sage_const_1 ), names=('w',)); (w,) = R._first_ngens(1)
print(R)

_Q = Integers(q)['w']; (w,) = _Q._first_ngens(1)
Rq = QuotientRing(_Q , _Q.ideal(w**N - _sage_const_1 ), names=('w',)); (w,) = Rq._first_ngens(1)
print(Rq)

# Mensagem Ã© dada num intervalo de coeficientes [0, q-1],
# por isso o modulo dos valores tem de ser recentrados
# para o intervalo [-q/2, q/2].b
def centered(l,p):
    fp = [ lift(Mod(a,p)) for a in l ]
    return [u if (u <= p//_sage_const_2 ) else u-p for u in fp ]

def to_list(f):
    return list(f)

class NTRU:
    def __init__(self, N, p, q):
        self.N = N
        self.p = p
        self.q = q
        while True:
            self.f = _sage_const_1  + self.p * R(self.random_poly())
            self.g = self.p * R(self.random_poly())
            try:
                fq = Rq(to_list(self.f)).inverse_of_unit()
                hq = fq * Rq(to_list(self.g))
                self.h = R([lift(a) for a in list(hq)])
                break
            except ZeroDivisionError:
                pass

    def encrypt(self, msg):
        r = R(self.random_poly())
        m = R(msg)
        return centered(to_list(self.h*r + m), self.q)

    def decrypt(self, enc):
        e = R(enc)
        a = centered(to_list(self.f * e), self.q)
        return centered(to_list(R(a)),self.p)

    def random_poly(self):
        return [choice([-_sage_const_1 ,_sage_const_0 ,_sage_const_1 ]) for i in range(self.N)]

bob = NTRU(N,p,q)
msg = bob.random_poly()
enc = bob.encrypt(msg)
dec = bob.decrypt(enc)
print(msg == dec)

